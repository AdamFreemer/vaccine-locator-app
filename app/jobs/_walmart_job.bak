class WalmartJob
  class << self
    def update_zone_1
      states = ['AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL']
      states.each do |state|
        update(state)
      end
    end

    def update_zone_2
      states = ['GA', 'GU', 'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA']
      states.each do |state|
        update(state)
      end
    end

    def update_zone_3
      states = ['MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MP', 'MS', 'MT', 'NC']
      states.each do |state|
        update(state)
      end
    end

    def update_zone_4
      states = ['ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR']
      states.each do |state|
        update(state)
      end
    end

    def update_zone_5
      states = ['PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VA', 'VT', 'WA', 'WI', 'WV','WY']
      states.each do |state|
        update(state)
      end
    end

    def update(state)
      locations = Location.where(state: state, is_walmart: true)
      locations.each do |location|
        require 'net/http'
        require 'uri'
  

        uri = URI.parse("https://www.walmart.com/pharmacy/v2/clinical-services/inventory/store/#{location.store_number}/f69edd30-1305-4f94-88cd-9a121ed111be?type=imz")
        request = Net::HTTP::Get.new(uri)
        request.content_type = "application/json"
        request["Sec-Ch-Ua"] = '\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"'
        request["Sec-Ch-Ua-Mobile"] = "?0"
        request["User-Agent"] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36"
        request["Wpharmacy-Source"] = "web/chrome89.0.4389/OS X 10.15.7/f69edd30-1305-4f94-88cd-9a121ed111be"
        request["Accept"] = "application/json"
        request["Referer"] = "https://www.walmart.com/pharmacy/clinical-services/immunization/scheduled?imzType=covid"
        request["Wpharmacy-Trackingid"] = "646d503b-9060-4d11-999b-6582ac4cae04"
        request["Rx-Electrode"] = "true"

        req_options = {
          use_ssl: uri.scheme == "https"
        }

        begin
          response = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
            http.request(request)
          end
          parsed_response = JSON.parse(response.body)
          binding.pry
          if parsed_response['status'] == "1"


            available_inventory = parsed_response['data']['inventory']
            total_inventory = 0
            available_inventory.each do |x|
              puts x['quantity']
              total = total + x['quantity'].to_i
            end
            binding.pry


            # binding.pry
            location.increment!(:appointments_all)
            location.increment!(:appointments) if location.availability.blank?
            location.last_updated = DateTime.now
            location.when_available = DateTime.now if location.availability.blank?
            location.availability = true
            History.create!(
              status: true,
              is_walmart: true,
              latitude: location&.latitude,
              longitude: location&.longitude,
              city: location&.name,
              state: location&.state,
              zip: location&.zip,
              last_updated: location&.last_updated,
              when_available: location&.when_available
            )            
          else
            # binding.pry
            location.availability = false
            location.last_updated = DateTime.now
          end
          location.save
        rescue StandardError => e
          location.availability = false
          location.last_updated = DateTime.now
          location.save
          puts "-- ERROR Walmart | #{location.id} | #{state} | #{location.city} \n Message: #{e}"
          next
        end
        puts "-- SUCCESS Walmart | #{location.availability} | #{state} | #{location.zip} | #{location.city}"
      end
    end
  end
end
